// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
insert into tasks (title, description)
values ($1, $2)
returning id, title, description, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
}

type CreateTaskRow struct {
	ID          int32
	Title       string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Connection) CreateTask(arg CreateTaskParams) (CreateTaskRow, error) {
	row := q.db.QueryRow(q.ctx, createTask, arg.Title, arg.Description)
	var i CreateTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Connection) DeleteTask(id int32) error {
	_, err := q.db.Exec(q.ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, status, created_at, updated_at
FROM tasks
WHERE id = $1
`

func (q *Connection) GetTaskByID(id int32) (Task, error) {
	row := q.db.QueryRow(q.ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, status, created_at, updated_at
FROM tasks
ORDER BY created_at DESC
`

func (q *Connection) ListTasks() ([]Task, error) {
	rows, err := q.db.Query(q.ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskDetails = `-- name: UpdateTaskDetails :exec
UPDATE tasks
SET title = $2, description = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTaskDetailsParams struct {
	ID          int32
	Title       string
	Description pgtype.Text
}

func (q *Connection) UpdateTaskDetails(arg UpdateTaskDetailsParams) error {
	_, err := q.db.Exec(q.ctx, updateTaskDetails, arg.ID, arg.Title, arg.Description)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTaskStatusParams struct {
	ID     int32
	Status string
}

func (q *Connection) UpdateTaskStatus(arg UpdateTaskStatusParams) error {
	_, err := q.db.Exec(q.ctx, updateTaskStatus, arg.ID, arg.Status)
	return err
}
